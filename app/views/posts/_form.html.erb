<%= form_with(model: post, class: "contents") do |form| %>
  <% if post.errors.any? %>
    <div id="error_explanation" class="bg-red-50 text-red-500 px-3 py-2 font-medium rounded-md mb-4">
      <h2><%= pluralize(post.errors.count, "error") %> prohibited this post from being saved:</h2>

      <ul class="list-disc ml-6">
        <% post.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-4">
    <%= form.label :caption, class: "block text-sm font-medium text-gray-900 mb-1" %>
    <%= form.text_field :caption, class: ["block w-full rounded-md border px-3 py-2 text-gray-900", {"border-gray-300 focus:border-orange-500 focus:ring-orange-500": post.errors[:caption].none?, "border-red-300 focus:border-red-500 focus:ring-red-500": post.errors[:caption].any?}] %>
  </div>

  <div class="mb-4">
    <%= form.label :body, class: "block text-sm font-medium text-gray-900 mb-1" %>
    <%= form.text_area :body, rows: 4, class: ["block w-full rounded-md border px-3 py-2 text-gray-900", {"border-gray-300 focus:border-orange-500 focus:ring-orange-500": post.errors[:body].none?, "border-red-300 focus:border-red-500 focus:ring-red-500": post.errors[:body].any?}] %>
  </div>

  <div class="mb-6">
    <%= form.label :images, class: "block text-sm font-medium text-gray-900 mb-1" %>
    <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md hover:border-orange-500 transition-colors">
      <div class="space-y-1 text-center">
        <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
          <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
        <div class="flex text-sm text-gray-600">
          <label for="post_images" class="relative cursor-pointer bg-white rounded-md font-medium text-orange-600 hover:text-orange-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-orange-500">
            <span>Upload images</span>
            <%= form.file_field :images, multiple: true, class: "sr-only", id: "post_images", accept: "image/*" %>
          </label>
          <p class="pl-1">or drag and drop</p>
        </div>
        <p class="text-xs text-gray-500">PNG, JPG, JPEG up to 5MB</p>
      </div>
    </div>

    <div id="image-preview" class="mt-4 grid grid-cols-4 gap-4">
      <% if post.images.attached? %>
        <% post.images.each do |image| %>
          <div class="relative group">
            <%= image_tag image, class: "w-full h-32 object-cover rounded-lg" %>
          </div>
        <% end %>
      <% end %>
    </div>
  </div>

  <div class="flex justify-end">
    <%= form.submit post.new_record? ? "Create Post" : "Update Post", class: "bg-orange-500 hover:bg-orange-600 text-white font-medium py-2 px-4 rounded-md" %>
  </div>
<% end %>

<script>
  document.addEventListener('turbo:load', function() {
    function setupImagePreview() {
      const imageInput = document.getElementById('post_images');
      const previewContainer = document.getElementById('image-preview');
      
      if (!imageInput || !previewContainer) return;

      function createImagePreview(file) {
        return new Promise((resolve) => {
          const reader = new FileReader();
          const previewWrapper = document.createElement('div');
          previewWrapper.className = 'relative group';
          
          reader.onload = function(e) {
            previewWrapper.innerHTML = `
              <div class="relative">
                <img src="${e.target.result}" class="w-full h-32 object-cover rounded-lg" />
                <div class="absolute inset-0 bg-black opacity-0 group-hover:opacity-50 transition-opacity rounded-lg">
                  <button type="button" 
                          class="absolute top-2 right-2 text-white opacity-0 group-hover:opacity-100 transition-opacity"
                          onclick="this.closest('.relative.group').remove()">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>
            `;
            resolve(previewWrapper);
          };
          
          reader.readAsDataURL(file);
        });
      }

      async function handleFiles(files) {
        previewContainer.innerHTML = ''; // Clear existing previews
        
        const previews = await Promise.all(
          Array.from(files)
            .filter(file => file.type.startsWith('image/'))
            .map(file => createImagePreview(file))
        );
        
        previews.forEach(preview => previewContainer.appendChild(preview));
      }

      // Handle file input change
      imageInput.addEventListener('change', function(e) {
        handleFiles(this.files);
      });

      // Handle drag and drop
      const dropZone = imageInput.closest('.border-dashed');
      
      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }

      function highlight() {
        dropZone.classList.add('border-orange-500', 'bg-orange-50');
      }

      function unhighlight() {
        dropZone.classList.remove('border-orange-500', 'bg-orange-50');
      }

      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, preventDefaults, false);
      });

      ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, highlight, false);
      });

      ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, unhighlight, false);
      });

      dropZone.addEventListener('drop', function(e) {
        const dt = e.dataTransfer;
        handleFiles(dt.files);
      });
    }

    // Initial setup
    setupImagePreview();

    // Re-initialize when navigating with Turbo
    document.addEventListener('turbo:render', setupImagePreview);
  });
</script>
